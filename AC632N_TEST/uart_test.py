import serial
import time

scooter_cmd = {
    "cruise_on":  [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xBB],
    "cruise_off": [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB],
    "lock_on":    [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xBB],
    "lock_off":   [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB],
    "light_on":   [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xBB],
    "light_off":  [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB],
    "zero_start_on":  [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xBB],
    "zero_start_off": [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB],
    "mode_1": [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xBB],
    "mode_2": [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB],
    "mode_3": [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xBB],
    "mode_4": [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB],
    "battery_info_speed" : [0xAA, 0xA1, 0x0A, 0x64, 0x64, 0x64, 0x64, 0x64, 0x00, 0xBB],
    "miles_info" :         [0xAA, 0xA2, 0x0A, 0x00, 0x64, 0x00, 0x03, 0xE8, 0x00, 0xBB],
}

def send_hex_data_over_uart(port, baud_rate):
    """
    This function opens a specified UART port and sends a specific hex data
    every 1 second. The second-to-last byte is the XOR checksum of all preceding bytes,
    excluding the last byte. The UART port and baud rate are configurable.

    Args:
    - port (str): The port name of the UART. For example, 'COM3' on Windows or '/dev/ttyUSB0' on Linux.
    - baud_rate (int): The baud rate for the UART communication.

    Returns:
    None
    """
    # Initialize the hex data as a list of bytes for easy modification
    hex_data_list = [0xAA, 0xA3, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xBB]
    
    try:
        # Open the specified UART port with the given baud rate
        with serial.Serial(port, baud_rate, timeout=1) as ser:
            print(f"Opened {port} at {baud_rate} baud rate.")
            while True:
                hex_data_list[-3] = 0x00 if hex_data_list[-3] == 0x01 else 0x01
                # Calculate XOR checksum of all bytes except the last one
                checksum = 0
                for byte in hex_data_list[:-2]:  # Exclude the last byte (0xBB) from checksum calculation
                    checksum ^= byte
                hex_data_list[-2] = checksum  # Update the second-to-last byte with the checksum
                
                # Convert the list of bytes to a bytes object
                hex_data = bytes(hex_data_list)
                
                # Send the hex data
                ser.write(hex_data)
                print(f"Sent: {hex_data.hex().upper()}")
                
                # Wait for 1 second
                time.sleep(0.5)
    except serial.SerialException as e:
        print(f"Failed to open port {port}: {e}")

# Example usage
send_hex_data_over_uart('COM12', 115200)